type Query {  
  hello: String
  getUsers: [User]
  getReport(targetId: String!, cycleId: String!): Report
  getUser(id: String): User
  createUser(input: UserInput): User
  changeUser(input: UserInput): User
}

input UserInput {
  email: String!
  fullName: String
  hashedPw: String
  title: String
  isOlga: Boolean
  photo: String
  teamName: String
  companyName: String
}

# type Mutation {
#   createUser(input: UserInput): User
#   changeUser(input: UserInput): User
# }

type User {
  _id: String,
  email: String
  fullName: String
  hashedPw: String
  title: String
  isOlga: Boolean
  photo: String
  teamName: String
  companyName: String
}


type ReportID {
  target: String
  cycle: String
}

type Report {
  _id: ReportID
  remarks: String
  status: String
  reviews: Reviews
}

type Reviews {
  self : Review
  peer : [Review]
}
type Review {
  reviewer: String
  isDeclined: Boolean
  submitted: Boolean
  grades: [Grade]
}

type Grade {
  metric: String
  rating: Int
  maxRating: Int
  comment: String
}